{"ast":null,"code":"import { AbiFunctionSignatureNotFoundError } from '../../errors/abi.js';\nimport { slice } from '../data/slice.js';\nimport { getFunctionSelector } from '../hash/getFunctionSelector.js';\nimport { decodeAbiParameters } from './decodeAbiParameters.js';\nimport { formatAbiItem } from './formatAbiItem.js';\nexport function decodeFunctionData({\n  abi,\n  data\n}) {\n  const signature = slice(data, 0, 4);\n  const description = abi.find(x => x.type === 'function' && signature === getFunctionSelector(formatAbiItem(x)));\n  if (!description) throw new AbiFunctionSignatureNotFoundError(signature, {\n    docsPath: '/docs/contract/decodeFunctionData'\n  });\n  return {\n    functionName: description.name,\n    args: 'inputs' in description && description.inputs && description.inputs.length > 0 ? decodeAbiParameters(description.inputs, slice(data, 4)) : undefined\n  };\n}","map":{"version":3,"names":["AbiFunctionSignatureNotFoundError","slice","getFunctionSelector","decodeAbiParameters","formatAbiItem","decodeFunctionData","abi","data","signature","description","find","x","type","docsPath","functionName","name","args","inputs","length","undefined"],"sources":["C:\\Users\\HP\\Desktop\\wEB3\\somnia\\node_modules\\viem\\utils\\abi\\decodeFunctionData.ts"],"sourcesContent":["import type { Abi, ExtractAbiFunctionNames } from 'abitype'\n\nimport { AbiFunctionSignatureNotFoundError } from '../../errors/abi.js'\nimport type { GetFunctionArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type GetFunctionSelectorErrorType,\n  getFunctionSelector,\n} from '../hash/getFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\n\nexport type DecodeFunctionDataParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n> = {\n  abi: TAbi\n  data: Hex\n}\n\nexport type DecodeFunctionDataReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  _FunctionNames extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiFunctionNames<TAbi>\n    : string,\n> = {\n  [TName in _FunctionNames]: {\n    args: GetFunctionArgs<TAbi, TName>['args']\n    functionName: TName\n  }\n}[_FunctionNames]\n\nexport type DecodeFunctionDataErrorType =\n  | AbiFunctionSignatureNotFoundError\n  | DecodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | GetFunctionSelectorErrorType\n  | SliceErrorType\n  | ErrorType\n\nexport function decodeFunctionData<TAbi extends Abi | readonly unknown[]>({\n  abi,\n  data,\n}: DecodeFunctionDataParameters<TAbi>) {\n  const signature = slice(data, 0, 4)\n  const description = (abi as Abi).find(\n    (x) =>\n      x.type === 'function' &&\n      signature === getFunctionSelector(formatAbiItem(x)),\n  )\n  if (!description)\n    throw new AbiFunctionSignatureNotFoundError(signature, {\n      docsPath: '/docs/contract/decodeFunctionData',\n    })\n  return {\n    functionName: (description as { name: string }).name,\n    args: ('inputs' in description &&\n    description.inputs &&\n    description.inputs.length > 0\n      ? decodeAbiParameters(description.inputs, slice(data, 4))\n      : undefined) as readonly unknown[] | undefined,\n  } as DecodeFunctionDataReturnType<TAbi>\n}\n"],"mappings":"AAEA,SAASA,iCAAiC,QAAQ,qBAAqB;AAGvE,SAA8BC,KAAK,QAAQ,kBAAkB;AAC7D,SAEEC,mBAAmB,QACd,gCAAgC;AAGvC,SAEEC,mBAAmB,QACd,0BAA0B;AACjC,SAAsCC,aAAa,QAAQ,oBAAoB;AA+B/E,OAAM,SAAUC,kBAAkBA,CAAwC;EACxEC,GAAG;EACHC;AAAI,CAC+B;EACnC,MAAMC,SAAS,GAAGP,KAAK,CAACM,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;EACnC,MAAME,WAAW,GAAIH,GAAW,CAACI,IAAI,CAClCC,CAAC,IACAA,CAAC,CAACC,IAAI,KAAK,UAAU,IACrBJ,SAAS,KAAKN,mBAAmB,CAACE,aAAa,CAACO,CAAC,CAAC,CAAC,CACtD;EACD,IAAI,CAACF,WAAW,EACd,MAAM,IAAIT,iCAAiC,CAACQ,SAAS,EAAE;IACrDK,QAAQ,EAAE;GACX,CAAC;EACJ,OAAO;IACLC,YAAY,EAAGL,WAAgC,CAACM,IAAI;IACpDC,IAAI,EAAG,QAAQ,IAAIP,WAAW,IAC9BA,WAAW,CAACQ,MAAM,IAClBR,WAAW,CAACQ,MAAM,CAACC,MAAM,GAAG,CAAC,GACzBf,mBAAmB,CAACM,WAAW,CAACQ,MAAM,EAAEhB,KAAK,CAACM,IAAI,EAAE,CAAC,CAAC,CAAC,GACvDY;GACiC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}