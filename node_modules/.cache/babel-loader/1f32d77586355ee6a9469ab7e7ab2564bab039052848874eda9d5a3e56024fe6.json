{"ast":null,"code":"import { universalSignatureValidatorAbi } from '../../constants/abis.js';\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js';\nimport { CallExecutionError } from '../../errors/contract.js';\nimport { isBytesEqual } from '../../utils/data/isBytesEqual.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { encodeDeployData, isHex, toHex } from '../../utils/index.js';\nimport { call } from './call.js';\n/**\n * Verifies a message hash on chain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash(client, {\n  address,\n  hash,\n  signature,\n  ...callRequest\n}) {\n  const signatureHex = isHex(signature) ? signature : toHex(signature);\n  try {\n    const {\n      data\n    } = await getAction(client, call, 'call')({\n      data: encodeDeployData({\n        abi: universalSignatureValidatorAbi,\n        args: [address, hash, signatureHex],\n        bytecode: universalSignatureValidatorByteCode\n      }),\n      ...callRequest\n    });\n    return isBytesEqual(data ?? '0x0', '0x1');\n  } catch (error) {\n    if (error instanceof CallExecutionError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false;\n    }\n    throw error;\n  }\n}","map":{"version":3,"names":["universalSignatureValidatorAbi","universalSignatureValidatorByteCode","CallExecutionError","isBytesEqual","getAction","encodeDeployData","isHex","toHex","call","verifyHash","client","address","hash","signature","callRequest","signatureHex","data","abi","args","bytecode","error"],"sources":["C:\\Users\\HP\\Desktop\\wEB3\\somnia\\node_modules\\viem\\actions\\public\\verifyHash.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalSignatureValidatorAbi } from '../../constants/abis.js'\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js'\nimport { CallExecutionError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { EncodeDeployDataErrorType } from '../../utils/abi/encodeDeployData.js'\nimport {\n  type IsBytesEqualErrorType,\n  isBytesEqual,\n} from '../../utils/data/isBytesEqual.js'\nimport type { IsHexErrorType } from '../../utils/data/isHex.js'\nimport type { ToHexErrorType } from '../../utils/encoding/toHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { encodeDeployData, isHex, toHex } from '../../utils/index.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type VerifyHashParameters = Pick<\n  CallParameters,\n  'blockNumber' | 'blockTag'\n> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The hash to be verified. */\n  hash: Hex\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyHashReturnType = boolean\n\nexport type VerifyHashErrorType =\n  | CallErrorType\n  | IsHexErrorType\n  | ToHexErrorType\n  | IsBytesEqualErrorType\n  | EncodeDeployDataErrorType\n  | ErrorType\n\n/**\n * Verifies a message hash on chain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, hash, signature, ...callRequest }: VerifyHashParameters,\n): Promise<VerifyHashReturnType> {\n  const signatureHex = isHex(signature) ? signature : toHex(signature)\n\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      data: encodeDeployData({\n        abi: universalSignatureValidatorAbi,\n        args: [address, hash, signatureHex],\n        bytecode: universalSignatureValidatorByteCode,\n      }),\n      ...callRequest,\n    } as unknown as CallParameters)\n\n    return isBytesEqual(data ?? '0x0', '0x1')\n  } catch (error) {\n    if (error instanceof CallExecutionError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false\n    }\n\n    throw error\n  }\n}\n"],"mappings":"AAIA,SAASA,8BAA8B,QAAQ,yBAAyB;AACxE,SAASC,mCAAmC,QAAQ,8BAA8B;AAClF,SAASC,kBAAkB,QAAQ,0BAA0B;AAK7D,SAEEC,YAAY,QACP,kCAAkC;AAGzC,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,gBAAgB,EAAEC,KAAK,EAAEC,KAAK,QAAQ,sBAAsB;AACrE,SAAkDC,IAAI,QAAQ,WAAW;AAwBzE;;;;;;;AAOA,OAAO,eAAeC,UAAUA,CAC9BC,MAAiC,EACjC;EAAEC,OAAO;EAAEC,IAAI;EAAEC,SAAS;EAAE,GAAGC;AAAW,CAAwB;EAElE,MAAMC,YAAY,GAAGT,KAAK,CAACO,SAAS,CAAC,GAAGA,SAAS,GAAGN,KAAK,CAACM,SAAS,CAAC;EAEpE,IAAI;IACF,MAAM;MAAEG;IAAI,CAAE,GAAG,MAAMZ,SAAS,CAC9BM,MAAM,EACNF,IAAI,EACJ,MAAM,CACP,CAAC;MACAQ,IAAI,EAAEX,gBAAgB,CAAC;QACrBY,GAAG,EAAEjB,8BAA8B;QACnCkB,IAAI,EAAE,CAACP,OAAO,EAAEC,IAAI,EAAEG,YAAY,CAAC;QACnCI,QAAQ,EAAElB;OACX,CAAC;MACF,GAAGa;KACyB,CAAC;IAE/B,OAAOX,YAAY,CAACa,IAAI,IAAI,KAAK,EAAE,KAAK,CAAC;GAC1C,CAAC,OAAOI,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYlB,kBAAkB,EAAE;MACvC;MACA;MACA;MACA,OAAO,KAAK;;IAGd,MAAMkB,KAAK;;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}