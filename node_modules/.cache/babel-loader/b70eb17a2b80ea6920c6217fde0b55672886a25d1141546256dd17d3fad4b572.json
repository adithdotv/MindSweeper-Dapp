{"ast":null,"code":"const schedulerCache = /*#__PURE__*/new Map();\nexport function createBatchScheduler({\n  fn,\n  id,\n  shouldSplitBatch,\n  wait = 0,\n  sort\n}) {\n  const exec = async () => {\n    const scheduler = getScheduler();\n    flush();\n    const args = scheduler.map(({\n      args\n    }) => args);\n    if (args.length === 0) return;\n    fn(args).then(data => {\n      if (sort && Array.isArray(data)) data.sort(sort);\n      for (let i = 0; i < scheduler.length; i++) {\n        const {\n          pendingPromise\n        } = scheduler[i];\n        pendingPromise.resolve?.([data[i], data]);\n      }\n    }).catch(err => {\n      for (let i = 0; i < scheduler.length; i++) {\n        const {\n          pendingPromise\n        } = scheduler[i];\n        pendingPromise.reject?.(err);\n      }\n    });\n  };\n  const flush = () => schedulerCache.delete(id);\n  const getBatchedArgs = () => getScheduler().map(({\n    args\n  }) => args);\n  const getScheduler = () => schedulerCache.get(id) || [];\n  const setScheduler = item => schedulerCache.set(id, [...getScheduler(), item]);\n  return {\n    flush,\n    async schedule(args) {\n      const pendingPromise = {};\n      const promise = new Promise((resolve, reject) => {\n        pendingPromise.resolve = resolve;\n        pendingPromise.reject = reject;\n      });\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args]);\n      if (split) exec();\n      const hasActiveScheduler = getScheduler().length > 0;\n      if (hasActiveScheduler) {\n        setScheduler({\n          args,\n          pendingPromise\n        });\n        return promise;\n      }\n      setScheduler({\n        args,\n        pendingPromise\n      });\n      setTimeout(exec, wait);\n      return promise;\n    }\n  };\n}","map":{"version":3,"names":["schedulerCache","Map","createBatchScheduler","fn","id","shouldSplitBatch","wait","sort","exec","scheduler","getScheduler","flush","args","map","length","then","data","Array","isArray","i","pendingPromise","resolve","catch","err","reject","delete","getBatchedArgs","get","setScheduler","item","set","schedule","promise","Promise","split","hasActiveScheduler","setTimeout"],"sources":["C:\\Users\\HP\\Desktop\\wEB3\\somnia\\node_modules\\viem\\utils\\promise\\createBatchScheduler.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\n\ntype Resolved<TReturnType extends readonly unknown[] = any> = [\n  result: TReturnType[number],\n  results: TReturnType,\n]\n\ntype PendingPromise<TReturnType extends readonly unknown[] = any> = {\n  resolve?: (data: Resolved<TReturnType>) => void\n  reject?: (reason?: unknown) => void\n}\n\ntype SchedulerItem = { args: unknown; pendingPromise: PendingPromise }\n\ntype BatchResultsCompareFn<TResult = unknown> = (\n  a: TResult,\n  b: TResult,\n) => number\n\nexport type CreateBatchSchedulerArguments<\n  TParameters = unknown,\n  TReturnType extends readonly unknown[] = readonly unknown[],\n> = {\n  fn: (args: TParameters[]) => Promise<TReturnType>\n  id: number | string\n  shouldSplitBatch?: (args: TParameters[]) => boolean\n  wait?: number\n  sort?: BatchResultsCompareFn<TReturnType[number]>\n}\n\nexport type CreateBatchSchedulerReturnType<\n  TParameters = unknown,\n  TReturnType extends readonly unknown[] = readonly unknown[],\n> = {\n  flush: () => void\n  schedule: TParameters extends undefined\n    ? (args?: TParameters) => Promise<Resolved<TReturnType>>\n    : (args: TParameters) => Promise<Resolved<TReturnType>>\n}\n\nexport type CreateBatchSchedulerErrorType = ErrorType\n\nconst schedulerCache = /*#__PURE__*/ new Map<number | string, SchedulerItem[]>()\n\nexport function createBatchScheduler<\n  TParameters,\n  TReturnType extends readonly unknown[],\n>({\n  fn,\n  id,\n  shouldSplitBatch,\n  wait = 0,\n  sort,\n}: CreateBatchSchedulerArguments<\n  TParameters,\n  TReturnType\n>): CreateBatchSchedulerReturnType<TParameters, TReturnType> {\n  const exec = async () => {\n    const scheduler = getScheduler()\n    flush()\n\n    const args = scheduler.map(({ args }) => args)\n\n    if (args.length === 0) return\n\n    fn(args as TParameters[])\n      .then((data) => {\n        if (sort && Array.isArray(data)) data.sort(sort)\n        for (let i = 0; i < scheduler.length; i++) {\n          const { pendingPromise } = scheduler[i]\n          pendingPromise.resolve?.([data[i], data])\n        }\n      })\n      .catch((err) => {\n        for (let i = 0; i < scheduler.length; i++) {\n          const { pendingPromise } = scheduler[i]\n          pendingPromise.reject?.(err)\n        }\n      })\n  }\n\n  const flush = () => schedulerCache.delete(id)\n\n  const getBatchedArgs = () =>\n    getScheduler().map(({ args }) => args) as TParameters[]\n\n  const getScheduler = () => schedulerCache.get(id) || []\n\n  const setScheduler = (item: SchedulerItem) =>\n    schedulerCache.set(id, [...getScheduler(), item])\n\n  return {\n    flush,\n    async schedule(args: TParameters) {\n      const pendingPromise: PendingPromise<TReturnType> = {}\n      const promise = new Promise<Resolved<TReturnType>>((resolve, reject) => {\n        pendingPromise.resolve = resolve\n        pendingPromise.reject = reject\n      })\n\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args])\n\n      if (split) exec()\n\n      const hasActiveScheduler = getScheduler().length > 0\n      if (hasActiveScheduler) {\n        setScheduler({ args, pendingPromise })\n        return promise\n      }\n\n      setScheduler({ args, pendingPromise })\n      setTimeout(exec, wait)\n      return promise\n    },\n  } as unknown as CreateBatchSchedulerReturnType<TParameters, TReturnType>\n}\n"],"mappings":"AA0CA,MAAMA,cAAc,GAAG,aAAc,IAAIC,GAAG,EAAoC;AAEhF,OAAM,SAAUC,oBAAoBA,CAGlC;EACAC,EAAE;EACFC,EAAE;EACFC,gBAAgB;EAChBC,IAAI,GAAG,CAAC;EACRC;AAAI,CAIL;EACC,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAW;IACtB,MAAMC,SAAS,GAAGC,YAAY,EAAE;IAChCC,KAAK,EAAE;IAEP,MAAMC,IAAI,GAAGH,SAAS,CAACI,GAAG,CAAC,CAAC;MAAED;IAAI,CAAE,KAAKA,IAAI,CAAC;IAE9C,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;IAEvBX,EAAE,CAACS,IAAqB,CAAC,CACtBG,IAAI,CAAEC,IAAI,IAAI;MACb,IAAIT,IAAI,IAAIU,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAEA,IAAI,CAACT,IAAI,CAACA,IAAI,CAAC;MAChD,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,SAAS,CAACK,MAAM,EAAEK,CAAC,EAAE,EAAE;QACzC,MAAM;UAAEC;QAAc,CAAE,GAAGX,SAAS,CAACU,CAAC,CAAC;QACvCC,cAAc,CAACC,OAAO,GAAG,CAACL,IAAI,CAACG,CAAC,CAAC,EAAEH,IAAI,CAAC,CAAC;;IAE7C,CAAC,CAAC,CACDM,KAAK,CAAEC,GAAG,IAAI;MACb,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,SAAS,CAACK,MAAM,EAAEK,CAAC,EAAE,EAAE;QACzC,MAAM;UAAEC;QAAc,CAAE,GAAGX,SAAS,CAACU,CAAC,CAAC;QACvCC,cAAc,CAACI,MAAM,GAAGD,GAAG,CAAC;;IAEhC,CAAC,CAAC;EACN,CAAC;EAED,MAAMZ,KAAK,GAAGA,CAAA,KAAMX,cAAc,CAACyB,MAAM,CAACrB,EAAE,CAAC;EAE7C,MAAMsB,cAAc,GAAGA,CAAA,KACrBhB,YAAY,EAAE,CAACG,GAAG,CAAC,CAAC;IAAED;EAAI,CAAE,KAAKA,IAAI,CAAkB;EAEzD,MAAMF,YAAY,GAAGA,CAAA,KAAMV,cAAc,CAAC2B,GAAG,CAACvB,EAAE,CAAC,IAAI,EAAE;EAEvD,MAAMwB,YAAY,GAAIC,IAAmB,IACvC7B,cAAc,CAAC8B,GAAG,CAAC1B,EAAE,EAAE,CAAC,GAAGM,YAAY,EAAE,EAAEmB,IAAI,CAAC,CAAC;EAEnD,OAAO;IACLlB,KAAK;IACL,MAAMoB,QAAQA,CAACnB,IAAiB;MAC9B,MAAMQ,cAAc,GAAgC,EAAE;MACtD,MAAMY,OAAO,GAAG,IAAIC,OAAO,CAAwB,CAACZ,OAAO,EAAEG,MAAM,KAAI;QACrEJ,cAAc,CAACC,OAAO,GAAGA,OAAO;QAChCD,cAAc,CAACI,MAAM,GAAGA,MAAM;MAChC,CAAC,CAAC;MAEF,MAAMU,KAAK,GAAG7B,gBAAgB,GAAG,CAAC,GAAGqB,cAAc,EAAE,EAAEd,IAAI,CAAC,CAAC;MAE7D,IAAIsB,KAAK,EAAE1B,IAAI,EAAE;MAEjB,MAAM2B,kBAAkB,GAAGzB,YAAY,EAAE,CAACI,MAAM,GAAG,CAAC;MACpD,IAAIqB,kBAAkB,EAAE;QACtBP,YAAY,CAAC;UAAEhB,IAAI;UAAEQ;QAAc,CAAE,CAAC;QACtC,OAAOY,OAAO;;MAGhBJ,YAAY,CAAC;QAAEhB,IAAI;QAAEQ;MAAc,CAAE,CAAC;MACtCgB,UAAU,CAAC5B,IAAI,EAAEF,IAAI,CAAC;MACtB,OAAO0B,OAAO;IAChB;GACsE;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}