{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { assertCurrentChain } from '../../utils/chain/assertCurrentChain.js';\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\nimport { prepareTransactionRequest } from './prepareTransactionRequest.js';\nimport { sendRawTransaction } from './sendRawTransaction.js';\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction(client, args) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/sendTransaction'\n  });\n  const account = parseAccount(account_);\n  try {\n    assertRequest(args);\n    let chainId;\n    if (chain !== null) {\n      chainId = await getAction(client, getChainId, 'getChainId')({});\n      assertCurrentChain({\n        currentChainId: chainId,\n        chain\n      });\n    }\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(client, prepareTransactionRequest, 'prepareTransactionRequest')({\n        account,\n        accessList,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value,\n        ...rest\n      });\n      if (!chainId) chainId = await getAction(client, getChainId, 'getChainId')({});\n      const serializer = chain?.serializers?.transaction;\n      const serializedTransaction = await account.signTransaction({\n        ...request,\n        chainId\n      }, {\n        serializer\n      });\n      return await getAction(client, sendRawTransaction, 'sendRawTransaction')({\n        serializedTransaction\n      });\n    }\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, {\n        format: chainFormat\n      }),\n      accessList,\n      data,\n      from: account.address,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    return await client.request({\n      method: 'eth_sendTransaction',\n      params: [request]\n    });\n  } catch (err) {\n    throw getTransactionError(err, {\n      ...args,\n      account,\n      chain: args.chain || undefined\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","assertCurrentChain","getTransactionError","extract","formatTransactionRequest","getAction","assertRequest","getChainId","prepareTransactionRequest","sendRawTransaction","sendTransaction","client","args","account","account_","chain","accessList","data","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","docsPath","chainId","currentChainId","type","request","serializer","serializers","transaction","serializedTransaction","signTransaction","chainFormat","formatters","transactionRequest","format","from","address","method","params","err","undefined"],"sources":["C:\\Users\\HP\\Desktop\\wEB3\\somnia\\node_modules\\viem\\actions\\wallet\\sendTransaction.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type {\n  TransactionRequest,\n  TransactionSerializable,\n} from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport {\n  type GetTransactionErrorReturnType,\n  getTransactionError,\n} from '../../utils/errors/getTransactionError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\nimport {\n  type PrepareTransactionRequestErrorType,\n  prepareTransactionRequest,\n} from './prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from './sendRawTransaction.js'\n\nexport type SendTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type SendTransactionReturnType = Hash\n\nexport type SendTransactionErrorType =\n  | ParseAccountErrorType\n  | GetTransactionErrorReturnType<\n      | AssertCurrentChainErrorType\n      | AssertRequestErrorType\n      | GetChainIdErrorType\n      | PrepareTransactionRequestErrorType\n      | SendRawTransactionReturnType\n      | SignTransactionErrorType\n      | RequestErrorType\n    >\n  | ErrorType\n\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: SendTransactionParameters<TChain, TAccount, TChainOverride>,\n): Promise<SendTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n    })\n  const account = parseAccount(account_)\n\n  try {\n    assertRequest(args as AssertRequestParameters)\n\n    let chainId\n    if (chain !== null) {\n      chainId = await getAction(client, getChainId, 'getChainId')({})\n      assertCurrentChain({\n        currentChainId: chainId,\n        chain,\n      })\n    }\n\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(\n        client,\n        prepareTransactionRequest,\n        'prepareTransactionRequest',\n      )({\n        account,\n        accessList,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value,\n        ...rest,\n      } as any)\n\n      if (!chainId)\n        chainId = await getAction(client, getChainId, 'getChainId')({})\n\n      const serializer = chain?.serializers?.transaction\n      const serializedTransaction = (await account.signTransaction(\n        {\n          ...request,\n          chainId,\n        } as TransactionSerializable,\n        { serializer },\n      )) as Hash\n      return await getAction(\n        client,\n        sendRawTransaction,\n        'sendRawTransaction',\n      )({\n        serializedTransaction,\n      })\n    }\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      accessList,\n      data,\n      from: account.address,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n    return await client.request({\n      method: 'eth_sendTransaction',\n      params: [request],\n    })\n  } catch (err) {\n    throw getTransactionError(err as BaseError, {\n      ...args,\n      account,\n      chain: args.chain || undefined,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}