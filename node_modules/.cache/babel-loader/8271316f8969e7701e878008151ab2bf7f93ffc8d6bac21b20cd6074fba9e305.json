{"ast":null,"code":"import { addressResolverAbi, universalResolverResolveAbi } from '../../constants/abis.js';\nimport { decodeFunctionResult } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { getChainContractAddress } from '../../utils/chain/getChainContractAddress.js';\nimport { trim } from '../../utils/data/trim.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js';\nimport { namehash } from '../../utils/ens/namehash.js';\nimport { packetToBytes } from '../../utils/ens/packetToBytes.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { readContract } from '../public/readContract.js';\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nexport async function getEnsAddress(client, {\n  blockNumber,\n  blockTag,\n  coinType,\n  name,\n  universalResolverAddress: universalResolverAddress_\n}) {\n  let universalResolverAddress = universalResolverAddress_;\n  if (!universalResolverAddress) {\n    if (!client.chain) throw new Error('client chain not configured. universalResolverAddress is required.');\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver'\n    });\n  }\n  try {\n    const functionData = encodeFunctionData({\n      abi: addressResolverAbi,\n      functionName: 'addr',\n      ...(coinType != null ? {\n        args: [namehash(name), BigInt(coinType)]\n      } : {\n        args: [namehash(name)]\n      })\n    });\n    const res = await getAction(client, readContract, 'readContract')({\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [toHex(packetToBytes(name)), functionData],\n      blockNumber,\n      blockTag\n    });\n    if (res[0] === '0x') return null;\n    const address = decodeFunctionResult({\n      abi: addressResolverAbi,\n      args: coinType != null ? [namehash(name), BigInt(coinType)] : undefined,\n      functionName: 'addr',\n      data: res[0]\n    });\n    if (address === '0x') return null;\n    if (trim(address) === '0x00') return null;\n    return address;\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'resolve')) return null;\n    throw err;\n  }\n}","map":{"version":3,"names":["addressResolverAbi","universalResolverResolveAbi","decodeFunctionResult","encodeFunctionData","getChainContractAddress","trim","toHex","isNullUniversalResolverError","namehash","packetToBytes","getAction","readContract","getEnsAddress","client","blockNumber","blockTag","coinType","name","universalResolverAddress","universalResolverAddress_","chain","Error","contract","functionData","abi","functionName","args","BigInt","res","address","undefined","data","err"],"sources":["C:\\Users\\HP\\Desktop\\wEB3\\somnia\\node_modules\\viem\\actions\\ens\\getEnsAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  addressResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type TrimErrorType, trim } from '../../utils/data/trim.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsAddressParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** ENSIP-9 compliant coinType used to resolve addresses for other chains */\n    coinType?: number\n    /** Name to get the address for. */\n    name: string\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address\n  }\n>\n\nexport type GetEnsAddressReturnType = Address | null\n\nexport type GetEnsAddressErrorType =\n  | GetChainContractAddressErrorType\n  | EncodeFunctionDataErrorType\n  | NamehashErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | DecodeFunctionResultErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress.html\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nexport async function getEnsAddress<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    coinType,\n    name,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsAddressParameters,\n): Promise<GetEnsAddressReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  try {\n    const functionData = encodeFunctionData({\n      abi: addressResolverAbi,\n      functionName: 'addr',\n      ...(coinType != null\n        ? { args: [namehash(name), BigInt(coinType)] }\n        : { args: [namehash(name)] }),\n    })\n\n    const res = await getAction(\n      client,\n      readContract,\n      'readContract',\n    )({\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [toHex(packetToBytes(name)), functionData],\n      blockNumber,\n      blockTag,\n    })\n\n    if (res[0] === '0x') return null\n\n    const address = decodeFunctionResult({\n      abi: addressResolverAbi,\n      args: coinType != null ? [namehash(name), BigInt(coinType)] : undefined,\n      functionName: 'addr',\n      data: res[0],\n    })\n\n    if (address === '0x') return null\n    if (trim(address) === '0x00') return null\n    return address\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'resolve')) return null\n    throw err\n  }\n}\n"],"mappings":"AAIA,SACEA,kBAAkB,EAClBC,2BAA2B,QACtB,yBAAyB;AAIhC,SAEEC,oBAAoB,QACf,yCAAyC;AAChD,SAEEC,kBAAkB,QACb,uCAAuC;AAC9C,SAEEC,uBAAuB,QAClB,8CAA8C;AACrD,SAA6BC,IAAI,QAAQ,0BAA0B;AACnE,SAA8BC,KAAK,QAAQ,+BAA+B;AAC1E,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAAiCC,QAAQ,QAAQ,6BAA6B;AAC9E,SAEEC,aAAa,QACR,kCAAkC;AACzC,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAEEC,YAAY,QACP,2BAA2B;AAyBlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAO,eAAeC,aAAaA,CACjCC,MAAiC,EACjC;EACEC,WAAW;EACXC,QAAQ;EACRC,QAAQ;EACRC,IAAI;EACJC,wBAAwB,EAAEC;AAAyB,CAC3B;EAE1B,IAAID,wBAAwB,GAAGC,yBAAyB;EACxD,IAAI,CAACD,wBAAwB,EAAE;IAC7B,IAAI,CAACL,MAAM,CAACO,KAAK,EACf,MAAM,IAAIC,KAAK,CACb,oEAAoE,CACrE;IAEHH,wBAAwB,GAAGd,uBAAuB,CAAC;MACjDU,WAAW;MACXM,KAAK,EAAEP,MAAM,CAACO,KAAK;MACnBE,QAAQ,EAAE;KACX,CAAC;;EAGJ,IAAI;IACF,MAAMC,YAAY,GAAGpB,kBAAkB,CAAC;MACtCqB,GAAG,EAAExB,kBAAkB;MACvByB,YAAY,EAAE,MAAM;MACpB,IAAIT,QAAQ,IAAI,IAAI,GAChB;QAAEU,IAAI,EAAE,CAAClB,QAAQ,CAACS,IAAI,CAAC,EAAEU,MAAM,CAACX,QAAQ,CAAC;MAAC,CAAE,GAC5C;QAAEU,IAAI,EAAE,CAAClB,QAAQ,CAACS,IAAI,CAAC;MAAC,CAAE;KAC/B,CAAC;IAEF,MAAMW,GAAG,GAAG,MAAMlB,SAAS,CACzBG,MAAM,EACNF,YAAY,EACZ,cAAc,CACf,CAAC;MACAkB,OAAO,EAAEX,wBAAwB;MACjCM,GAAG,EAAEvB,2BAA2B;MAChCwB,YAAY,EAAE,SAAS;MACvBC,IAAI,EAAE,CAACpB,KAAK,CAACG,aAAa,CAACQ,IAAI,CAAC,CAAC,EAAEM,YAAY,CAAC;MAChDT,WAAW;MACXC;KACD,CAAC;IAEF,IAAIa,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,OAAO,IAAI;IAEhC,MAAMC,OAAO,GAAG3B,oBAAoB,CAAC;MACnCsB,GAAG,EAAExB,kBAAkB;MACvB0B,IAAI,EAAEV,QAAQ,IAAI,IAAI,GAAG,CAACR,QAAQ,CAACS,IAAI,CAAC,EAAEU,MAAM,CAACX,QAAQ,CAAC,CAAC,GAAGc,SAAS;MACvEL,YAAY,EAAE,MAAM;MACpBM,IAAI,EAAEH,GAAG,CAAC,CAAC;KACZ,CAAC;IAEF,IAAIC,OAAO,KAAK,IAAI,EAAE,OAAO,IAAI;IACjC,IAAIxB,IAAI,CAACwB,OAAO,CAAC,KAAK,MAAM,EAAE,OAAO,IAAI;IACzC,OAAOA,OAAO;GACf,CAAC,OAAOG,GAAG,EAAE;IACZ,IAAIzB,4BAA4B,CAACyB,GAAG,EAAE,SAAS,CAAC,EAAE,OAAO,IAAI;IAC7D,MAAMA,GAAG;;AAEb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}